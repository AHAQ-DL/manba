// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpcpb.proto

package rpcpb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	metapb "github.com/fagongzi/gateway/pkg/pb/metapb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RpcHeader is the header for all rpc request and response
type RpcHeader struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid" json:"uuid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcHeader) Reset()         { *m = RpcHeader{} }
func (m *RpcHeader) String() string { return proto.CompactTextString(m) }
func (*RpcHeader) ProtoMessage()    {}
func (*RpcHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{0}
}
func (m *RpcHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RpcHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcHeader.Merge(dst, src)
}
func (m *RpcHeader) XXX_Size() int {
	return m.Size()
}
func (m *RpcHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RpcHeader proto.InternalMessageInfo

func (m *RpcHeader) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type PutClusterReq struct {
	Header               RpcHeader      `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              metapb.Cluster `protobuf:"bytes,2,opt,name=cluster" json:"cluster"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PutClusterReq) Reset()         { *m = PutClusterReq{} }
func (m *PutClusterReq) String() string { return proto.CompactTextString(m) }
func (*PutClusterReq) ProtoMessage()    {}
func (*PutClusterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{1}
}
func (m *PutClusterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutClusterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutClusterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutClusterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutClusterReq.Merge(dst, src)
}
func (m *PutClusterReq) XXX_Size() int {
	return m.Size()
}
func (m *PutClusterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutClusterReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutClusterReq proto.InternalMessageInfo

func (m *PutClusterReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutClusterReq) GetCluster() metapb.Cluster {
	if m != nil {
		return m.Cluster
	}
	return metapb.Cluster{}
}

type PutClusterRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutClusterRsp) Reset()         { *m = PutClusterRsp{} }
func (m *PutClusterRsp) String() string { return proto.CompactTextString(m) }
func (*PutClusterRsp) ProtoMessage()    {}
func (*PutClusterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{2}
}
func (m *PutClusterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutClusterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutClusterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutClusterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutClusterRsp.Merge(dst, src)
}
func (m *PutClusterRsp) XXX_Size() int {
	return m.Size()
}
func (m *PutClusterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutClusterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PutClusterRsp proto.InternalMessageInfo

func (m *PutClusterRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutClusterRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveClusterReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveClusterReq) Reset()         { *m = RemoveClusterReq{} }
func (m *RemoveClusterReq) String() string { return proto.CompactTextString(m) }
func (*RemoveClusterReq) ProtoMessage()    {}
func (*RemoveClusterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{3}
}
func (m *RemoveClusterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveClusterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveClusterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveClusterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveClusterReq.Merge(dst, src)
}
func (m *RemoveClusterReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveClusterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveClusterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveClusterReq proto.InternalMessageInfo

func (m *RemoveClusterReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveClusterReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveClusterRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveClusterRsp) Reset()         { *m = RemoveClusterRsp{} }
func (m *RemoveClusterRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveClusterRsp) ProtoMessage()    {}
func (*RemoveClusterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{4}
}
func (m *RemoveClusterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveClusterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveClusterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveClusterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveClusterRsp.Merge(dst, src)
}
func (m *RemoveClusterRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveClusterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveClusterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveClusterRsp proto.InternalMessageInfo

func (m *RemoveClusterRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetClusterReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetClusterReq) Reset()         { *m = GetClusterReq{} }
func (m *GetClusterReq) String() string { return proto.CompactTextString(m) }
func (*GetClusterReq) ProtoMessage()    {}
func (*GetClusterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{5}
}
func (m *GetClusterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetClusterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReq.Merge(dst, src)
}
func (m *GetClusterReq) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReq proto.InternalMessageInfo

func (m *GetClusterReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetClusterReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetClusterRsp struct {
	Header               RpcHeader       `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              *metapb.Cluster `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetClusterRsp) Reset()         { *m = GetClusterRsp{} }
func (m *GetClusterRsp) String() string { return proto.CompactTextString(m) }
func (*GetClusterRsp) ProtoMessage()    {}
func (*GetClusterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{6}
}
func (m *GetClusterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetClusterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRsp.Merge(dst, src)
}
func (m *GetClusterRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRsp proto.InternalMessageInfo

func (m *GetClusterRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetClusterRsp) GetCluster() *metapb.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type GetClusterListReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetClusterListReq) Reset()         { *m = GetClusterListReq{} }
func (m *GetClusterListReq) String() string { return proto.CompactTextString(m) }
func (*GetClusterListReq) ProtoMessage()    {}
func (*GetClusterListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{7}
}
func (m *GetClusterListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetClusterListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListReq.Merge(dst, src)
}
func (m *GetClusterListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListReq proto.InternalMessageInfo

func (m *GetClusterListReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type PutServerReq struct {
	Header               RpcHeader     `protobuf:"bytes,1,opt,name=header" json:"header"`
	Server               metapb.Server `protobuf:"bytes,2,opt,name=server" json:"server"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PutServerReq) Reset()         { *m = PutServerReq{} }
func (m *PutServerReq) String() string { return proto.CompactTextString(m) }
func (*PutServerReq) ProtoMessage()    {}
func (*PutServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{8}
}
func (m *PutServerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutServerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutServerReq.Merge(dst, src)
}
func (m *PutServerReq) XXX_Size() int {
	return m.Size()
}
func (m *PutServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutServerReq proto.InternalMessageInfo

func (m *PutServerReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutServerReq) GetServer() metapb.Server {
	if m != nil {
		return m.Server
	}
	return metapb.Server{}
}

type PutServerRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutServerRsp) Reset()         { *m = PutServerRsp{} }
func (m *PutServerRsp) String() string { return proto.CompactTextString(m) }
func (*PutServerRsp) ProtoMessage()    {}
func (*PutServerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{9}
}
func (m *PutServerRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutServerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutServerRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutServerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutServerRsp.Merge(dst, src)
}
func (m *PutServerRsp) XXX_Size() int {
	return m.Size()
}
func (m *PutServerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutServerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PutServerRsp proto.InternalMessageInfo

func (m *PutServerRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutServerRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveServerReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveServerReq) Reset()         { *m = RemoveServerReq{} }
func (m *RemoveServerReq) String() string { return proto.CompactTextString(m) }
func (*RemoveServerReq) ProtoMessage()    {}
func (*RemoveServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{10}
}
func (m *RemoveServerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveServerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServerReq.Merge(dst, src)
}
func (m *RemoveServerReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServerReq proto.InternalMessageInfo

func (m *RemoveServerReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveServerReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveServerRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveServerRsp) Reset()         { *m = RemoveServerRsp{} }
func (m *RemoveServerRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveServerRsp) ProtoMessage()    {}
func (*RemoveServerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{11}
}
func (m *RemoveServerRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveServerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveServerRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveServerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveServerRsp.Merge(dst, src)
}
func (m *RemoveServerRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveServerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveServerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveServerRsp proto.InternalMessageInfo

func (m *RemoveServerRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetServerReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetServerReq) Reset()         { *m = GetServerReq{} }
func (m *GetServerReq) String() string { return proto.CompactTextString(m) }
func (*GetServerReq) ProtoMessage()    {}
func (*GetServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{12}
}
func (m *GetServerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerReq.Merge(dst, src)
}
func (m *GetServerReq) XXX_Size() int {
	return m.Size()
}
func (m *GetServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerReq proto.InternalMessageInfo

func (m *GetServerReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetServerReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetServerRsp struct {
	Header               RpcHeader      `protobuf:"bytes,1,opt,name=header" json:"header"`
	Server               *metapb.Server `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetServerRsp) Reset()         { *m = GetServerRsp{} }
func (m *GetServerRsp) String() string { return proto.CompactTextString(m) }
func (*GetServerRsp) ProtoMessage()    {}
func (*GetServerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{13}
}
func (m *GetServerRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetServerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerRsp.Merge(dst, src)
}
func (m *GetServerRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetServerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerRsp proto.InternalMessageInfo

func (m *GetServerRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetServerRsp) GetServer() *metapb.Server {
	if m != nil {
		return m.Server
	}
	return nil
}

type GetServerListReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetServerListReq) Reset()         { *m = GetServerListReq{} }
func (m *GetServerListReq) String() string { return proto.CompactTextString(m) }
func (*GetServerListReq) ProtoMessage()    {}
func (*GetServerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{14}
}
func (m *GetServerListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetServerListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerListReq.Merge(dst, src)
}
func (m *GetServerListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetServerListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerListReq proto.InternalMessageInfo

func (m *GetServerListReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type PutAPIReq struct {
	Header               RpcHeader  `protobuf:"bytes,1,opt,name=header" json:"header"`
	API                  metapb.API `protobuf:"bytes,2,opt,name=api" json:"api"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PutAPIReq) Reset()         { *m = PutAPIReq{} }
func (m *PutAPIReq) String() string { return proto.CompactTextString(m) }
func (*PutAPIReq) ProtoMessage()    {}
func (*PutAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{15}
}
func (m *PutAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutAPIReq.Merge(dst, src)
}
func (m *PutAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *PutAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutAPIReq proto.InternalMessageInfo

func (m *PutAPIReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutAPIReq) GetAPI() metapb.API {
	if m != nil {
		return m.API
	}
	return metapb.API{}
}

type PutAPIRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutAPIRsp) Reset()         { *m = PutAPIRsp{} }
func (m *PutAPIRsp) String() string { return proto.CompactTextString(m) }
func (*PutAPIRsp) ProtoMessage()    {}
func (*PutAPIRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{16}
}
func (m *PutAPIRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutAPIRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutAPIRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutAPIRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutAPIRsp.Merge(dst, src)
}
func (m *PutAPIRsp) XXX_Size() int {
	return m.Size()
}
func (m *PutAPIRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutAPIRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PutAPIRsp proto.InternalMessageInfo

func (m *PutAPIRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutAPIRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveAPIReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveAPIReq) Reset()         { *m = RemoveAPIReq{} }
func (m *RemoveAPIReq) String() string { return proto.CompactTextString(m) }
func (*RemoveAPIReq) ProtoMessage()    {}
func (*RemoveAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{17}
}
func (m *RemoveAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAPIReq.Merge(dst, src)
}
func (m *RemoveAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAPIReq proto.InternalMessageInfo

func (m *RemoveAPIReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveAPIReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveAPIRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveAPIRsp) Reset()         { *m = RemoveAPIRsp{} }
func (m *RemoveAPIRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveAPIRsp) ProtoMessage()    {}
func (*RemoveAPIRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{18}
}
func (m *RemoveAPIRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAPIRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAPIRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveAPIRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAPIRsp.Merge(dst, src)
}
func (m *RemoveAPIRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAPIRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAPIRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAPIRsp proto.InternalMessageInfo

func (m *RemoveAPIRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetAPIReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetAPIReq) Reset()         { *m = GetAPIReq{} }
func (m *GetAPIReq) String() string { return proto.CompactTextString(m) }
func (*GetAPIReq) ProtoMessage()    {}
func (*GetAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{19}
}
func (m *GetAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIReq.Merge(dst, src)
}
func (m *GetAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIReq proto.InternalMessageInfo

func (m *GetAPIReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetAPIReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetAPIRsp struct {
	Header               RpcHeader   `protobuf:"bytes,1,opt,name=header" json:"header"`
	API                  *metapb.API `protobuf:"bytes,2,opt,name=api" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAPIRsp) Reset()         { *m = GetAPIRsp{} }
func (m *GetAPIRsp) String() string { return proto.CompactTextString(m) }
func (*GetAPIRsp) ProtoMessage()    {}
func (*GetAPIRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{20}
}
func (m *GetAPIRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAPIRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIRsp.Merge(dst, src)
}
func (m *GetAPIRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIRsp proto.InternalMessageInfo

func (m *GetAPIRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetAPIRsp) GetAPI() *metapb.API {
	if m != nil {
		return m.API
	}
	return nil
}

type GetAPIListReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetAPIListReq) Reset()         { *m = GetAPIListReq{} }
func (m *GetAPIListReq) String() string { return proto.CompactTextString(m) }
func (*GetAPIListReq) ProtoMessage()    {}
func (*GetAPIListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{21}
}
func (m *GetAPIListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAPIListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIListReq.Merge(dst, src)
}
func (m *GetAPIListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIListReq proto.InternalMessageInfo

func (m *GetAPIListReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type PutRoutingReq struct {
	Header               RpcHeader      `protobuf:"bytes,1,opt,name=header" json:"header"`
	Routing              metapb.Routing `protobuf:"bytes,2,opt,name=routing" json:"routing"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PutRoutingReq) Reset()         { *m = PutRoutingReq{} }
func (m *PutRoutingReq) String() string { return proto.CompactTextString(m) }
func (*PutRoutingReq) ProtoMessage()    {}
func (*PutRoutingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{22}
}
func (m *PutRoutingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRoutingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRoutingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutRoutingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRoutingReq.Merge(dst, src)
}
func (m *PutRoutingReq) XXX_Size() int {
	return m.Size()
}
func (m *PutRoutingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRoutingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutRoutingReq proto.InternalMessageInfo

func (m *PutRoutingReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutRoutingReq) GetRouting() metapb.Routing {
	if m != nil {
		return m.Routing
	}
	return metapb.Routing{}
}

type PutRoutingRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutRoutingRsp) Reset()         { *m = PutRoutingRsp{} }
func (m *PutRoutingRsp) String() string { return proto.CompactTextString(m) }
func (*PutRoutingRsp) ProtoMessage()    {}
func (*PutRoutingRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{23}
}
func (m *PutRoutingRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRoutingRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRoutingRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutRoutingRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRoutingRsp.Merge(dst, src)
}
func (m *PutRoutingRsp) XXX_Size() int {
	return m.Size()
}
func (m *PutRoutingRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRoutingRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PutRoutingRsp proto.InternalMessageInfo

func (m *PutRoutingRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutRoutingRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveRoutingReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveRoutingReq) Reset()         { *m = RemoveRoutingReq{} }
func (m *RemoveRoutingReq) String() string { return proto.CompactTextString(m) }
func (*RemoveRoutingReq) ProtoMessage()    {}
func (*RemoveRoutingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{24}
}
func (m *RemoveRoutingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRoutingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRoutingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveRoutingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRoutingReq.Merge(dst, src)
}
func (m *RemoveRoutingReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRoutingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRoutingReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRoutingReq proto.InternalMessageInfo

func (m *RemoveRoutingReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveRoutingReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemoveRoutingRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveRoutingRsp) Reset()         { *m = RemoveRoutingRsp{} }
func (m *RemoveRoutingRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveRoutingRsp) ProtoMessage()    {}
func (*RemoveRoutingRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{25}
}
func (m *RemoveRoutingRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRoutingRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRoutingRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveRoutingRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRoutingRsp.Merge(dst, src)
}
func (m *RemoveRoutingRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRoutingRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRoutingRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRoutingRsp proto.InternalMessageInfo

func (m *RemoveRoutingRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetRoutingReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRoutingReq) Reset()         { *m = GetRoutingReq{} }
func (m *GetRoutingReq) String() string { return proto.CompactTextString(m) }
func (*GetRoutingReq) ProtoMessage()    {}
func (*GetRoutingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{26}
}
func (m *GetRoutingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoutingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoutingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoutingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoutingReq.Merge(dst, src)
}
func (m *GetRoutingReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoutingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoutingReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoutingReq proto.InternalMessageInfo

func (m *GetRoutingReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetRoutingReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetRoutingRsp struct {
	Header               RpcHeader       `protobuf:"bytes,1,opt,name=header" json:"header"`
	Routing              *metapb.Routing `protobuf:"bytes,2,opt,name=routing" json:"routing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetRoutingRsp) Reset()         { *m = GetRoutingRsp{} }
func (m *GetRoutingRsp) String() string { return proto.CompactTextString(m) }
func (*GetRoutingRsp) ProtoMessage()    {}
func (*GetRoutingRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{27}
}
func (m *GetRoutingRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoutingRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoutingRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoutingRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoutingRsp.Merge(dst, src)
}
func (m *GetRoutingRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetRoutingRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoutingRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoutingRsp proto.InternalMessageInfo

func (m *GetRoutingRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetRoutingRsp) GetRouting() *metapb.Routing {
	if m != nil {
		return m.Routing
	}
	return nil
}

type GetRoutingListReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRoutingListReq) Reset()         { *m = GetRoutingListReq{} }
func (m *GetRoutingListReq) String() string { return proto.CompactTextString(m) }
func (*GetRoutingListReq) ProtoMessage()    {}
func (*GetRoutingListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{28}
}
func (m *GetRoutingListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoutingListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoutingListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoutingListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoutingListReq.Merge(dst, src)
}
func (m *GetRoutingListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoutingListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoutingListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoutingListReq proto.InternalMessageInfo

func (m *GetRoutingListReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type AddBindReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              uint64    `protobuf:"varint,2,opt,name=cluster" json:"cluster"`
	Server               uint64    `protobuf:"varint,3,opt,name=server" json:"server"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AddBindReq) Reset()         { *m = AddBindReq{} }
func (m *AddBindReq) String() string { return proto.CompactTextString(m) }
func (*AddBindReq) ProtoMessage()    {}
func (*AddBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{29}
}
func (m *AddBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBindReq.Merge(dst, src)
}
func (m *AddBindReq) XXX_Size() int {
	return m.Size()
}
func (m *AddBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddBindReq proto.InternalMessageInfo

func (m *AddBindReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *AddBindReq) GetCluster() uint64 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *AddBindReq) GetServer() uint64 {
	if m != nil {
		return m.Server
	}
	return 0
}

type AddBindRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AddBindRsp) Reset()         { *m = AddBindRsp{} }
func (m *AddBindRsp) String() string { return proto.CompactTextString(m) }
func (*AddBindRsp) ProtoMessage()    {}
func (*AddBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{30}
}
func (m *AddBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBindRsp.Merge(dst, src)
}
func (m *AddBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddBindRsp proto.InternalMessageInfo

func (m *AddBindRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type RemoveBindReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              uint64    `protobuf:"varint,2,opt,name=cluster" json:"cluster"`
	Server               uint64    `protobuf:"varint,3,opt,name=server" json:"server"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveBindReq) Reset()         { *m = RemoveBindReq{} }
func (m *RemoveBindReq) String() string { return proto.CompactTextString(m) }
func (*RemoveBindReq) ProtoMessage()    {}
func (*RemoveBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{31}
}
func (m *RemoveBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBindReq.Merge(dst, src)
}
func (m *RemoveBindReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBindReq proto.InternalMessageInfo

func (m *RemoveBindReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveBindReq) GetCluster() uint64 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *RemoveBindReq) GetServer() uint64 {
	if m != nil {
		return m.Server
	}
	return 0
}

type RemoveBindRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveBindRsp) Reset()         { *m = RemoveBindRsp{} }
func (m *RemoveBindRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveBindRsp) ProtoMessage()    {}
func (*RemoveBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{32}
}
func (m *RemoveBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBindRsp.Merge(dst, src)
}
func (m *RemoveBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBindRsp proto.InternalMessageInfo

func (m *RemoveBindRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type RemoveClusterBindReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              uint64    `protobuf:"varint,2,opt,name=cluster" json:"cluster"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveClusterBindReq) Reset()         { *m = RemoveClusterBindReq{} }
func (m *RemoveClusterBindReq) String() string { return proto.CompactTextString(m) }
func (*RemoveClusterBindReq) ProtoMessage()    {}
func (*RemoveClusterBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{33}
}
func (m *RemoveClusterBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveClusterBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveClusterBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveClusterBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveClusterBindReq.Merge(dst, src)
}
func (m *RemoveClusterBindReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveClusterBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveClusterBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveClusterBindReq proto.InternalMessageInfo

func (m *RemoveClusterBindReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemoveClusterBindReq) GetCluster() uint64 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

type RemoveClusterBindRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveClusterBindRsp) Reset()         { *m = RemoveClusterBindRsp{} }
func (m *RemoveClusterBindRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveClusterBindRsp) ProtoMessage()    {}
func (*RemoveClusterBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{34}
}
func (m *RemoveClusterBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveClusterBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveClusterBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveClusterBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveClusterBindRsp.Merge(dst, src)
}
func (m *RemoveClusterBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveClusterBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveClusterBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveClusterBindRsp proto.InternalMessageInfo

func (m *RemoveClusterBindRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetBindServersReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Cluster              uint64    `protobuf:"varint,2,opt,name=cluster" json:"cluster"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetBindServersReq) Reset()         { *m = GetBindServersReq{} }
func (m *GetBindServersReq) String() string { return proto.CompactTextString(m) }
func (*GetBindServersReq) ProtoMessage()    {}
func (*GetBindServersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{35}
}
func (m *GetBindServersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindServersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindServersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBindServersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindServersReq.Merge(dst, src)
}
func (m *GetBindServersReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBindServersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindServersReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindServersReq proto.InternalMessageInfo

func (m *GetBindServersReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetBindServersReq) GetCluster() uint64 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

type GetBindServersRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Servers              []uint64  `protobuf:"varint,2,rep,name=servers" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetBindServersRsp) Reset()         { *m = GetBindServersRsp{} }
func (m *GetBindServersRsp) String() string { return proto.CompactTextString(m) }
func (*GetBindServersRsp) ProtoMessage()    {}
func (*GetBindServersRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{36}
}
func (m *GetBindServersRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindServersRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindServersRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBindServersRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindServersRsp.Merge(dst, src)
}
func (m *GetBindServersRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetBindServersRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindServersRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindServersRsp proto.InternalMessageInfo

func (m *GetBindServersRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetBindServersRsp) GetServers() []uint64 {
	if m != nil {
		return m.Servers
	}
	return nil
}

type PutPluginReq struct {
	Header               RpcHeader     `protobuf:"bytes,1,opt,name=header" json:"header"`
	Plugin               metapb.Plugin `protobuf:"bytes,2,opt,name=plugin" json:"plugin"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PutPluginReq) Reset()         { *m = PutPluginReq{} }
func (m *PutPluginReq) String() string { return proto.CompactTextString(m) }
func (*PutPluginReq) ProtoMessage()    {}
func (*PutPluginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{37}
}
func (m *PutPluginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutPluginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutPluginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutPluginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutPluginReq.Merge(dst, src)
}
func (m *PutPluginReq) XXX_Size() int {
	return m.Size()
}
func (m *PutPluginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutPluginReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutPluginReq proto.InternalMessageInfo

func (m *PutPluginReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutPluginReq) GetPlugin() metapb.Plugin {
	if m != nil {
		return m.Plugin
	}
	return metapb.Plugin{}
}

type PutPluginRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutPluginRsp) Reset()         { *m = PutPluginRsp{} }
func (m *PutPluginRsp) String() string { return proto.CompactTextString(m) }
func (*PutPluginRsp) ProtoMessage()    {}
func (*PutPluginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{38}
}
func (m *PutPluginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutPluginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutPluginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutPluginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutPluginRsp.Merge(dst, src)
}
func (m *PutPluginRsp) XXX_Size() int {
	return m.Size()
}
func (m *PutPluginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutPluginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PutPluginRsp proto.InternalMessageInfo

func (m *PutPluginRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *PutPluginRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemovePluginReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemovePluginReq) Reset()         { *m = RemovePluginReq{} }
func (m *RemovePluginReq) String() string { return proto.CompactTextString(m) }
func (*RemovePluginReq) ProtoMessage()    {}
func (*RemovePluginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{39}
}
func (m *RemovePluginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePluginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePluginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemovePluginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePluginReq.Merge(dst, src)
}
func (m *RemovePluginReq) XXX_Size() int {
	return m.Size()
}
func (m *RemovePluginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePluginReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePluginReq proto.InternalMessageInfo

func (m *RemovePluginReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *RemovePluginReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type RemovePluginRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemovePluginRsp) Reset()         { *m = RemovePluginRsp{} }
func (m *RemovePluginRsp) String() string { return proto.CompactTextString(m) }
func (*RemovePluginRsp) ProtoMessage()    {}
func (*RemovePluginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{40}
}
func (m *RemovePluginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePluginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePluginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemovePluginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePluginRsp.Merge(dst, src)
}
func (m *RemovePluginRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemovePluginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePluginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePluginRsp proto.InternalMessageInfo

func (m *RemovePluginRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetPluginReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetPluginReq) Reset()         { *m = GetPluginReq{} }
func (m *GetPluginReq) String() string { return proto.CompactTextString(m) }
func (*GetPluginReq) ProtoMessage()    {}
func (*GetPluginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{41}
}
func (m *GetPluginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPluginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPluginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPluginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginReq.Merge(dst, src)
}
func (m *GetPluginReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPluginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginReq proto.InternalMessageInfo

func (m *GetPluginReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetPluginReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetPluginRsp struct {
	Header               RpcHeader      `protobuf:"bytes,1,opt,name=header" json:"header"`
	Plugin               *metapb.Plugin `protobuf:"bytes,2,opt,name=plugin" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetPluginRsp) Reset()         { *m = GetPluginRsp{} }
func (m *GetPluginRsp) String() string { return proto.CompactTextString(m) }
func (*GetPluginRsp) ProtoMessage()    {}
func (*GetPluginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{42}
}
func (m *GetPluginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPluginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPluginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPluginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginRsp.Merge(dst, src)
}
func (m *GetPluginRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetPluginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginRsp proto.InternalMessageInfo

func (m *GetPluginRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetPluginRsp) GetPlugin() *metapb.Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type GetPluginListReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetPluginListReq) Reset()         { *m = GetPluginListReq{} }
func (m *GetPluginListReq) String() string { return proto.CompactTextString(m) }
func (*GetPluginListReq) ProtoMessage()    {}
func (*GetPluginListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{43}
}
func (m *GetPluginListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPluginListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPluginListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPluginListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginListReq.Merge(dst, src)
}
func (m *GetPluginListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPluginListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginListReq proto.InternalMessageInfo

func (m *GetPluginListReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type ApplyPluginsReq struct {
	Header               RpcHeader              `protobuf:"bytes,1,opt,name=header" json:"header"`
	Applied              *metapb.AppliedPlugins `protobuf:"bytes,2,opt,name=applied" json:"applied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplyPluginsReq) Reset()         { *m = ApplyPluginsReq{} }
func (m *ApplyPluginsReq) String() string { return proto.CompactTextString(m) }
func (*ApplyPluginsReq) ProtoMessage()    {}
func (*ApplyPluginsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{44}
}
func (m *ApplyPluginsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyPluginsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyPluginsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplyPluginsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyPluginsReq.Merge(dst, src)
}
func (m *ApplyPluginsReq) XXX_Size() int {
	return m.Size()
}
func (m *ApplyPluginsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyPluginsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyPluginsReq proto.InternalMessageInfo

func (m *ApplyPluginsReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *ApplyPluginsReq) GetApplied() *metapb.AppliedPlugins {
	if m != nil {
		return m.Applied
	}
	return nil
}

type ApplyPluginsRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ApplyPluginsRsp) Reset()         { *m = ApplyPluginsRsp{} }
func (m *ApplyPluginsRsp) String() string { return proto.CompactTextString(m) }
func (*ApplyPluginsRsp) ProtoMessage()    {}
func (*ApplyPluginsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{45}
}
func (m *ApplyPluginsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyPluginsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyPluginsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplyPluginsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyPluginsRsp.Merge(dst, src)
}
func (m *ApplyPluginsRsp) XXX_Size() int {
	return m.Size()
}
func (m *ApplyPluginsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyPluginsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyPluginsRsp proto.InternalMessageInfo

func (m *ApplyPluginsRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetAppliedPluginsReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetAppliedPluginsReq) Reset()         { *m = GetAppliedPluginsReq{} }
func (m *GetAppliedPluginsReq) String() string { return proto.CompactTextString(m) }
func (*GetAppliedPluginsReq) ProtoMessage()    {}
func (*GetAppliedPluginsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{46}
}
func (m *GetAppliedPluginsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppliedPluginsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppliedPluginsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppliedPluginsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppliedPluginsReq.Merge(dst, src)
}
func (m *GetAppliedPluginsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAppliedPluginsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppliedPluginsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppliedPluginsReq proto.InternalMessageInfo

func (m *GetAppliedPluginsReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type GetAppliedPluginsRsp struct {
	Header               RpcHeader              `protobuf:"bytes,1,opt,name=header" json:"header"`
	Applied              *metapb.AppliedPlugins `protobuf:"bytes,2,opt,name=applied" json:"applied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetAppliedPluginsRsp) Reset()         { *m = GetAppliedPluginsRsp{} }
func (m *GetAppliedPluginsRsp) String() string { return proto.CompactTextString(m) }
func (*GetAppliedPluginsRsp) ProtoMessage()    {}
func (*GetAppliedPluginsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{47}
}
func (m *GetAppliedPluginsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppliedPluginsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppliedPluginsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppliedPluginsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppliedPluginsRsp.Merge(dst, src)
}
func (m *GetAppliedPluginsRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAppliedPluginsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppliedPluginsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppliedPluginsRsp proto.InternalMessageInfo

func (m *GetAppliedPluginsRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *GetAppliedPluginsRsp) GetApplied() *metapb.AppliedPlugins {
	if m != nil {
		return m.Applied
	}
	return nil
}

type CleanReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CleanReq) Reset()         { *m = CleanReq{} }
func (m *CleanReq) String() string { return proto.CompactTextString(m) }
func (*CleanReq) ProtoMessage()    {}
func (*CleanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{48}
}
func (m *CleanReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CleanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CleanReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CleanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanReq.Merge(dst, src)
}
func (m *CleanReq) XXX_Size() int {
	return m.Size()
}
func (m *CleanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanReq.DiscardUnknown(m)
}

var xxx_messageInfo_CleanReq proto.InternalMessageInfo

func (m *CleanReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type CleanRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CleanRsp) Reset()         { *m = CleanRsp{} }
func (m *CleanRsp) String() string { return proto.CompactTextString(m) }
func (*CleanRsp) ProtoMessage()    {}
func (*CleanRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{49}
}
func (m *CleanRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CleanRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CleanRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CleanRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanRsp.Merge(dst, src)
}
func (m *CleanRsp) XXX_Size() int {
	return m.Size()
}
func (m *CleanRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CleanRsp proto.InternalMessageInfo

func (m *CleanRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type SetIDReq struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	ID                   uint64    `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetIDReq) Reset()         { *m = SetIDReq{} }
func (m *SetIDReq) String() string { return proto.CompactTextString(m) }
func (*SetIDReq) ProtoMessage()    {}
func (*SetIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{50}
}
func (m *SetIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIDReq.Merge(dst, src)
}
func (m *SetIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SetIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetIDReq proto.InternalMessageInfo

func (m *SetIDReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *SetIDReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type SetIDRsp struct {
	Header               RpcHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetIDRsp) Reset()         { *m = SetIDRsp{} }
func (m *SetIDRsp) String() string { return proto.CompactTextString(m) }
func (*SetIDRsp) ProtoMessage()    {}
func (*SetIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{51}
}
func (m *SetIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIDRsp.Merge(dst, src)
}
func (m *SetIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetIDRsp proto.InternalMessageInfo

func (m *SetIDRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

type BatchReq struct {
	Header               RpcHeader           `protobuf:"bytes,1,opt,name=header" json:"header"`
	PutClusters          []*PutClusterReq    `protobuf:"bytes,2,rep,name=putClusters" json:"putClusters,omitempty"`
	RemoveClusters       []*RemoveClusterReq `protobuf:"bytes,3,rep,name=removeClusters" json:"removeClusters,omitempty"`
	PutServers           []*PutServerReq     `protobuf:"bytes,4,rep,name=putServers" json:"putServers,omitempty"`
	RemoveServers        []*RemoveServerReq  `protobuf:"bytes,5,rep,name=removeServers" json:"removeServers,omitempty"`
	PutAPIs              []*PutAPIReq        `protobuf:"bytes,6,rep,name=putAPIs" json:"putAPIs,omitempty"`
	RemoveAPIs           []*RemoveAPIReq     `protobuf:"bytes,7,rep,name=removeAPIs" json:"removeAPIs,omitempty"`
	PutRoutings          []*PutRoutingReq    `protobuf:"bytes,8,rep,name=putRoutings" json:"putRoutings,omitempty"`
	RemoveRoutings       []*RemoveRoutingReq `protobuf:"bytes,9,rep,name=removeRoutings" json:"removeRoutings,omitempty"`
	AddBinds             []*AddBindReq       `protobuf:"bytes,10,rep,name=addBinds" json:"addBinds,omitempty"`
	RemoveBinds          []*RemoveBindReq    `protobuf:"bytes,11,rep,name=removeBinds" json:"removeBinds,omitempty"`
	PutPlugins           []*PutPluginReq     `protobuf:"bytes,12,rep,name=putPlugins" json:"putPlugins,omitempty"`
	RemovePlugins        []*RemovePluginReq  `protobuf:"bytes,13,rep,name=removePlugins" json:"removePlugins,omitempty"`
	ApplyPlugins         *ApplyPluginsReq    `protobuf:"bytes,14,opt,name=applyPlugins" json:"applyPlugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BatchReq) Reset()         { *m = BatchReq{} }
func (m *BatchReq) String() string { return proto.CompactTextString(m) }
func (*BatchReq) ProtoMessage()    {}
func (*BatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{52}
}
func (m *BatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchReq.Merge(dst, src)
}
func (m *BatchReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchReq proto.InternalMessageInfo

func (m *BatchReq) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *BatchReq) GetPutClusters() []*PutClusterReq {
	if m != nil {
		return m.PutClusters
	}
	return nil
}

func (m *BatchReq) GetRemoveClusters() []*RemoveClusterReq {
	if m != nil {
		return m.RemoveClusters
	}
	return nil
}

func (m *BatchReq) GetPutServers() []*PutServerReq {
	if m != nil {
		return m.PutServers
	}
	return nil
}

func (m *BatchReq) GetRemoveServers() []*RemoveServerReq {
	if m != nil {
		return m.RemoveServers
	}
	return nil
}

func (m *BatchReq) GetPutAPIs() []*PutAPIReq {
	if m != nil {
		return m.PutAPIs
	}
	return nil
}

func (m *BatchReq) GetRemoveAPIs() []*RemoveAPIReq {
	if m != nil {
		return m.RemoveAPIs
	}
	return nil
}

func (m *BatchReq) GetPutRoutings() []*PutRoutingReq {
	if m != nil {
		return m.PutRoutings
	}
	return nil
}

func (m *BatchReq) GetRemoveRoutings() []*RemoveRoutingReq {
	if m != nil {
		return m.RemoveRoutings
	}
	return nil
}

func (m *BatchReq) GetAddBinds() []*AddBindReq {
	if m != nil {
		return m.AddBinds
	}
	return nil
}

func (m *BatchReq) GetRemoveBinds() []*RemoveBindReq {
	if m != nil {
		return m.RemoveBinds
	}
	return nil
}

func (m *BatchReq) GetPutPlugins() []*PutPluginReq {
	if m != nil {
		return m.PutPlugins
	}
	return nil
}

func (m *BatchReq) GetRemovePlugins() []*RemovePluginReq {
	if m != nil {
		return m.RemovePlugins
	}
	return nil
}

func (m *BatchReq) GetApplyPlugins() *ApplyPluginsReq {
	if m != nil {
		return m.ApplyPlugins
	}
	return nil
}

type BatchRsp struct {
	Header               RpcHeader           `protobuf:"bytes,1,opt,name=header" json:"header"`
	PutClusters          []*PutClusterRsp    `protobuf:"bytes,2,rep,name=putClusters" json:"putClusters,omitempty"`
	RemoveClusters       []*RemoveClusterRsp `protobuf:"bytes,3,rep,name=removeClusters" json:"removeClusters,omitempty"`
	PutServers           []*PutServerRsp     `protobuf:"bytes,4,rep,name=putServers" json:"putServers,omitempty"`
	RemoveServers        []*RemoveServerRsp  `protobuf:"bytes,5,rep,name=removeServers" json:"removeServers,omitempty"`
	PutAPIs              []*PutAPIRsp        `protobuf:"bytes,6,rep,name=putAPIs" json:"putAPIs,omitempty"`
	RemoveAPIs           []*RemoveAPIRsp     `protobuf:"bytes,7,rep,name=removeAPIs" json:"removeAPIs,omitempty"`
	PutRoutings          []*PutRoutingRsp    `protobuf:"bytes,8,rep,name=putRoutings" json:"putRoutings,omitempty"`
	RemoveRoutings       []*RemoveRoutingRsp `protobuf:"bytes,9,rep,name=removeRoutings" json:"removeRoutings,omitempty"`
	AddBinds             []*AddBindRsp       `protobuf:"bytes,10,rep,name=addBinds" json:"addBinds,omitempty"`
	RemoveBinds          []*RemoveBindRsp    `protobuf:"bytes,11,rep,name=removeBinds" json:"removeBinds,omitempty"`
	PutPlugins           []*PutPluginRsp     `protobuf:"bytes,12,rep,name=putPlugins" json:"putPlugins,omitempty"`
	RemovePlugins        []*RemovePluginRsp  `protobuf:"bytes,13,rep,name=removePlugins" json:"removePlugins,omitempty"`
	ApplyPlugins         *ApplyPluginsRsp    `protobuf:"bytes,14,opt,name=applyPlugins" json:"applyPlugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BatchRsp) Reset()         { *m = BatchRsp{} }
func (m *BatchRsp) String() string { return proto.CompactTextString(m) }
func (*BatchRsp) ProtoMessage()    {}
func (*BatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcpb_a460804f5caec904, []int{53}
}
func (m *BatchRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRsp.Merge(dst, src)
}
func (m *BatchRsp) XXX_Size() int {
	return m.Size()
}
func (m *BatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRsp proto.InternalMessageInfo

func (m *BatchRsp) GetHeader() RpcHeader {
	if m != nil {
		return m.Header
	}
	return RpcHeader{}
}

func (m *BatchRsp) GetPutClusters() []*PutClusterRsp {
	if m != nil {
		return m.PutClusters
	}
	return nil
}

func (m *BatchRsp) GetRemoveClusters() []*RemoveClusterRsp {
	if m != nil {
		return m.RemoveClusters
	}
	return nil
}

func (m *BatchRsp) GetPutServers() []*PutServerRsp {
	if m != nil {
		return m.PutServers
	}
	return nil
}

func (m *BatchRsp) GetRemoveServers() []*RemoveServerRsp {
	if m != nil {
		return m.RemoveServers
	}
	return nil
}

func (m *BatchRsp) GetPutAPIs() []*PutAPIRsp {
	if m != nil {
		return m.PutAPIs
	}
	return nil
}

func (m *BatchRsp) GetRemoveAPIs() []*RemoveAPIRsp {
	if m != nil {
		return m.RemoveAPIs
	}
	return nil
}

func (m *BatchRsp) GetPutRoutings() []*PutRoutingRsp {
	if m != nil {
		return m.PutRoutings
	}
	return nil
}

func (m *BatchRsp) GetRemoveRoutings() []*RemoveRoutingRsp {
	if m != nil {
		return m.RemoveRoutings
	}
	return nil
}

func (m *BatchRsp) GetAddBinds() []*AddBindRsp {
	if m != nil {
		return m.AddBinds
	}
	return nil
}

func (m *BatchRsp) GetRemoveBinds() []*RemoveBindRsp {
	if m != nil {
		return m.RemoveBinds
	}
	return nil
}

func (m *BatchRsp) GetPutPlugins() []*PutPluginRsp {
	if m != nil {
		return m.PutPlugins
	}
	return nil
}

func (m *BatchRsp) GetRemovePlugins() []*RemovePluginRsp {
	if m != nil {
		return m.RemovePlugins
	}
	return nil
}

func (m *BatchRsp) GetApplyPlugins() *ApplyPluginsRsp {
	if m != nil {
		return m.ApplyPlugins
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcHeader)(nil), "rpcpb.RpcHeader")
	proto.RegisterType((*PutClusterReq)(nil), "rpcpb.PutClusterReq")
	proto.RegisterType((*PutClusterRsp)(nil), "rpcpb.PutClusterRsp")
	proto.RegisterType((*RemoveClusterReq)(nil), "rpcpb.RemoveClusterReq")
	proto.RegisterType((*RemoveClusterRsp)(nil), "rpcpb.RemoveClusterRsp")
	proto.RegisterType((*GetClusterReq)(nil), "rpcpb.GetClusterReq")
	proto.RegisterType((*GetClusterRsp)(nil), "rpcpb.GetClusterRsp")
	proto.RegisterType((*GetClusterListReq)(nil), "rpcpb.GetClusterListReq")
	proto.RegisterType((*PutServerReq)(nil), "rpcpb.PutServerReq")
	proto.RegisterType((*PutServerRsp)(nil), "rpcpb.PutServerRsp")
	proto.RegisterType((*RemoveServerReq)(nil), "rpcpb.RemoveServerReq")
	proto.RegisterType((*RemoveServerRsp)(nil), "rpcpb.RemoveServerRsp")
	proto.RegisterType((*GetServerReq)(nil), "rpcpb.GetServerReq")
	proto.RegisterType((*GetServerRsp)(nil), "rpcpb.GetServerRsp")
	proto.RegisterType((*GetServerListReq)(nil), "rpcpb.GetServerListReq")
	proto.RegisterType((*PutAPIReq)(nil), "rpcpb.PutAPIReq")
	proto.RegisterType((*PutAPIRsp)(nil), "rpcpb.PutAPIRsp")
	proto.RegisterType((*RemoveAPIReq)(nil), "rpcpb.RemoveAPIReq")
	proto.RegisterType((*RemoveAPIRsp)(nil), "rpcpb.RemoveAPIRsp")
	proto.RegisterType((*GetAPIReq)(nil), "rpcpb.GetAPIReq")
	proto.RegisterType((*GetAPIRsp)(nil), "rpcpb.GetAPIRsp")
	proto.RegisterType((*GetAPIListReq)(nil), "rpcpb.GetAPIListReq")
	proto.RegisterType((*PutRoutingReq)(nil), "rpcpb.PutRoutingReq")
	proto.RegisterType((*PutRoutingRsp)(nil), "rpcpb.PutRoutingRsp")
	proto.RegisterType((*RemoveRoutingReq)(nil), "rpcpb.RemoveRoutingReq")
	proto.RegisterType((*RemoveRoutingRsp)(nil), "rpcpb.RemoveRoutingRsp")
	proto.RegisterType((*GetRoutingReq)(nil), "rpcpb.GetRoutingReq")
	proto.RegisterType((*GetRoutingRsp)(nil), "rpcpb.GetRoutingRsp")
	proto.RegisterType((*GetRoutingListReq)(nil), "rpcpb.GetRoutingListReq")
	proto.RegisterType((*AddBindReq)(nil), "rpcpb.AddBindReq")
	proto.RegisterType((*AddBindRsp)(nil), "rpcpb.AddBindRsp")
	proto.RegisterType((*RemoveBindReq)(nil), "rpcpb.RemoveBindReq")
	proto.RegisterType((*RemoveBindRsp)(nil), "rpcpb.RemoveBindRsp")
	proto.RegisterType((*RemoveClusterBindReq)(nil), "rpcpb.RemoveClusterBindReq")
	proto.RegisterType((*RemoveClusterBindRsp)(nil), "rpcpb.RemoveClusterBindRsp")
	proto.RegisterType((*GetBindServersReq)(nil), "rpcpb.GetBindServersReq")
	proto.RegisterType((*GetBindServersRsp)(nil), "rpcpb.GetBindServersRsp")
	proto.RegisterType((*PutPluginReq)(nil), "rpcpb.PutPluginReq")
	proto.RegisterType((*PutPluginRsp)(nil), "rpcpb.PutPluginRsp")
	proto.RegisterType((*RemovePluginReq)(nil), "rpcpb.RemovePluginReq")
	proto.RegisterType((*RemovePluginRsp)(nil), "rpcpb.RemovePluginRsp")
	proto.RegisterType((*GetPluginReq)(nil), "rpcpb.GetPluginReq")
	proto.RegisterType((*GetPluginRsp)(nil), "rpcpb.GetPluginRsp")
	proto.RegisterType((*GetPluginListReq)(nil), "rpcpb.GetPluginListReq")
	proto.RegisterType((*ApplyPluginsReq)(nil), "rpcpb.ApplyPluginsReq")
	proto.RegisterType((*ApplyPluginsRsp)(nil), "rpcpb.ApplyPluginsRsp")
	proto.RegisterType((*GetAppliedPluginsReq)(nil), "rpcpb.GetAppliedPluginsReq")
	proto.RegisterType((*GetAppliedPluginsRsp)(nil), "rpcpb.GetAppliedPluginsRsp")
	proto.RegisterType((*CleanReq)(nil), "rpcpb.CleanReq")
	proto.RegisterType((*CleanRsp)(nil), "rpcpb.CleanRsp")
	proto.RegisterType((*SetIDReq)(nil), "rpcpb.SetIDReq")
	proto.RegisterType((*SetIDRsp)(nil), "rpcpb.SetIDRsp")
	proto.RegisterType((*BatchReq)(nil), "rpcpb.BatchReq")
	proto.RegisterType((*BatchRsp)(nil), "rpcpb.BatchRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetaServiceClient interface {
	PutCluster(ctx context.Context, in *PutClusterReq, opts ...grpc.CallOption) (*PutClusterRsp, error)
	RemoveCluster(ctx context.Context, in *RemoveClusterReq, opts ...grpc.CallOption) (*RemoveClusterRsp, error)
	GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterRsp, error)
	GetClusterList(ctx context.Context, in *GetClusterListReq, opts ...grpc.CallOption) (MetaService_GetClusterListClient, error)
	PutServer(ctx context.Context, in *PutServerReq, opts ...grpc.CallOption) (*PutServerRsp, error)
	RemoveServer(ctx context.Context, in *RemoveServerReq, opts ...grpc.CallOption) (*RemoveServerRsp, error)
	GetServer(ctx context.Context, in *GetServerReq, opts ...grpc.CallOption) (*GetServerRsp, error)
	GetServerList(ctx context.Context, in *GetServerListReq, opts ...grpc.CallOption) (MetaService_GetServerListClient, error)
	PutAPI(ctx context.Context, in *PutAPIReq, opts ...grpc.CallOption) (*PutAPIRsp, error)
	RemoveAPI(ctx context.Context, in *RemoveAPIReq, opts ...grpc.CallOption) (*RemoveAPIRsp, error)
	GetAPI(ctx context.Context, in *GetAPIReq, opts ...grpc.CallOption) (*GetAPIRsp, error)
	GetAPIList(ctx context.Context, in *GetAPIListReq, opts ...grpc.CallOption) (MetaService_GetAPIListClient, error)
	PutRouting(ctx context.Context, in *PutRoutingReq, opts ...grpc.CallOption) (*PutRoutingRsp, error)
	RemoveRouting(ctx context.Context, in *RemoveRoutingReq, opts ...grpc.CallOption) (*RemoveRoutingRsp, error)
	GetRouting(ctx context.Context, in *GetRoutingReq, opts ...grpc.CallOption) (*GetRoutingRsp, error)
	GetRoutingList(ctx context.Context, in *GetRoutingListReq, opts ...grpc.CallOption) (MetaService_GetRoutingListClient, error)
	AddBind(ctx context.Context, in *AddBindReq, opts ...grpc.CallOption) (*AddBindRsp, error)
	RemoveBind(ctx context.Context, in *RemoveBindReq, opts ...grpc.CallOption) (*RemoveBindRsp, error)
	RemoveClusterBind(ctx context.Context, in *RemoveClusterBindReq, opts ...grpc.CallOption) (*RemoveClusterBindRsp, error)
	GetBindServers(ctx context.Context, in *GetBindServersReq, opts ...grpc.CallOption) (*GetBindServersRsp, error)
	PutPlugin(ctx context.Context, in *PutPluginReq, opts ...grpc.CallOption) (*PutPluginRsp, error)
	RemovePlugin(ctx context.Context, in *RemovePluginReq, opts ...grpc.CallOption) (*RemovePluginRsp, error)
	GetPlugin(ctx context.Context, in *GetPluginReq, opts ...grpc.CallOption) (*GetPluginRsp, error)
	GetPluginList(ctx context.Context, in *GetPluginListReq, opts ...grpc.CallOption) (MetaService_GetPluginListClient, error)
	ApplyPlugins(ctx context.Context, in *ApplyPluginsReq, opts ...grpc.CallOption) (*ApplyPluginsRsp, error)
	GetAppliedPlugins(ctx context.Context, in *GetAppliedPluginsReq, opts ...grpc.CallOption) (*GetAppliedPluginsRsp, error)
	Clean(ctx context.Context, in *CleanReq, opts ...grpc.CallOption) (*CleanRsp, error)
	SetID(ctx context.Context, in *SetIDReq, opts ...grpc.CallOption) (*SetIDRsp, error)
	Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchRsp, error)
}

type metaServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetaServiceClient(cc *grpc.ClientConn) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) PutCluster(ctx context.Context, in *PutClusterReq, opts ...grpc.CallOption) (*PutClusterRsp, error) {
	out := new(PutClusterRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/PutCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveCluster(ctx context.Context, in *RemoveClusterReq, opts ...grpc.CallOption) (*RemoveClusterRsp, error) {
	out := new(RemoveClusterRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterRsp, error) {
	out := new(GetClusterRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetClusterList(ctx context.Context, in *GetClusterListReq, opts ...grpc.CallOption) (MetaService_GetClusterListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaService_serviceDesc.Streams[0], "/rpcpb.MetaService/GetClusterList", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaServiceGetClusterListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaService_GetClusterListClient interface {
	Recv() (*metapb.Cluster, error)
	grpc.ClientStream
}

type metaServiceGetClusterListClient struct {
	grpc.ClientStream
}

func (x *metaServiceGetClusterListClient) Recv() (*metapb.Cluster, error) {
	m := new(metapb.Cluster)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaServiceClient) PutServer(ctx context.Context, in *PutServerReq, opts ...grpc.CallOption) (*PutServerRsp, error) {
	out := new(PutServerRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/PutServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveServer(ctx context.Context, in *RemoveServerReq, opts ...grpc.CallOption) (*RemoveServerRsp, error) {
	out := new(RemoveServerRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetServer(ctx context.Context, in *GetServerReq, opts ...grpc.CallOption) (*GetServerRsp, error) {
	out := new(GetServerRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetServerList(ctx context.Context, in *GetServerListReq, opts ...grpc.CallOption) (MetaService_GetServerListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaService_serviceDesc.Streams[1], "/rpcpb.MetaService/GetServerList", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaServiceGetServerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaService_GetServerListClient interface {
	Recv() (*metapb.Server, error)
	grpc.ClientStream
}

type metaServiceGetServerListClient struct {
	grpc.ClientStream
}

func (x *metaServiceGetServerListClient) Recv() (*metapb.Server, error) {
	m := new(metapb.Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaServiceClient) PutAPI(ctx context.Context, in *PutAPIReq, opts ...grpc.CallOption) (*PutAPIRsp, error) {
	out := new(PutAPIRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/PutAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveAPI(ctx context.Context, in *RemoveAPIReq, opts ...grpc.CallOption) (*RemoveAPIRsp, error) {
	out := new(RemoveAPIRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetAPI(ctx context.Context, in *GetAPIReq, opts ...grpc.CallOption) (*GetAPIRsp, error) {
	out := new(GetAPIRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetAPIList(ctx context.Context, in *GetAPIListReq, opts ...grpc.CallOption) (MetaService_GetAPIListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaService_serviceDesc.Streams[2], "/rpcpb.MetaService/GetAPIList", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaServiceGetAPIListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaService_GetAPIListClient interface {
	Recv() (*metapb.API, error)
	grpc.ClientStream
}

type metaServiceGetAPIListClient struct {
	grpc.ClientStream
}

func (x *metaServiceGetAPIListClient) Recv() (*metapb.API, error) {
	m := new(metapb.API)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaServiceClient) PutRouting(ctx context.Context, in *PutRoutingReq, opts ...grpc.CallOption) (*PutRoutingRsp, error) {
	out := new(PutRoutingRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/PutRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveRouting(ctx context.Context, in *RemoveRoutingReq, opts ...grpc.CallOption) (*RemoveRoutingRsp, error) {
	out := new(RemoveRoutingRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetRouting(ctx context.Context, in *GetRoutingReq, opts ...grpc.CallOption) (*GetRoutingRsp, error) {
	out := new(GetRoutingRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetRoutingList(ctx context.Context, in *GetRoutingListReq, opts ...grpc.CallOption) (MetaService_GetRoutingListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaService_serviceDesc.Streams[3], "/rpcpb.MetaService/GetRoutingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaServiceGetRoutingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaService_GetRoutingListClient interface {
	Recv() (*metapb.Routing, error)
	grpc.ClientStream
}

type metaServiceGetRoutingListClient struct {
	grpc.ClientStream
}

func (x *metaServiceGetRoutingListClient) Recv() (*metapb.Routing, error) {
	m := new(metapb.Routing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaServiceClient) AddBind(ctx context.Context, in *AddBindReq, opts ...grpc.CallOption) (*AddBindRsp, error) {
	out := new(AddBindRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/AddBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveBind(ctx context.Context, in *RemoveBindReq, opts ...grpc.CallOption) (*RemoveBindRsp, error) {
	out := new(RemoveBindRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemoveClusterBind(ctx context.Context, in *RemoveClusterBindReq, opts ...grpc.CallOption) (*RemoveClusterBindRsp, error) {
	out := new(RemoveClusterBindRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemoveClusterBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetBindServers(ctx context.Context, in *GetBindServersReq, opts ...grpc.CallOption) (*GetBindServersRsp, error) {
	out := new(GetBindServersRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetBindServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) PutPlugin(ctx context.Context, in *PutPluginReq, opts ...grpc.CallOption) (*PutPluginRsp, error) {
	out := new(PutPluginRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/PutPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) RemovePlugin(ctx context.Context, in *RemovePluginReq, opts ...grpc.CallOption) (*RemovePluginRsp, error) {
	out := new(RemovePluginRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/RemovePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetPlugin(ctx context.Context, in *GetPluginReq, opts ...grpc.CallOption) (*GetPluginRsp, error) {
	out := new(GetPluginRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetPluginList(ctx context.Context, in *GetPluginListReq, opts ...grpc.CallOption) (MetaService_GetPluginListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaService_serviceDesc.Streams[4], "/rpcpb.MetaService/GetPluginList", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaServiceGetPluginListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaService_GetPluginListClient interface {
	Recv() (*metapb.Plugin, error)
	grpc.ClientStream
}

type metaServiceGetPluginListClient struct {
	grpc.ClientStream
}

func (x *metaServiceGetPluginListClient) Recv() (*metapb.Plugin, error) {
	m := new(metapb.Plugin)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaServiceClient) ApplyPlugins(ctx context.Context, in *ApplyPluginsReq, opts ...grpc.CallOption) (*ApplyPluginsRsp, error) {
	out := new(ApplyPluginsRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/ApplyPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetAppliedPlugins(ctx context.Context, in *GetAppliedPluginsReq, opts ...grpc.CallOption) (*GetAppliedPluginsRsp, error) {
	out := new(GetAppliedPluginsRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/GetAppliedPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) Clean(ctx context.Context, in *CleanReq, opts ...grpc.CallOption) (*CleanRsp, error) {
	out := new(CleanRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/Clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) SetID(ctx context.Context, in *SetIDReq, opts ...grpc.CallOption) (*SetIDRsp, error) {
	out := new(SetIDRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/SetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchRsp, error) {
	out := new(BatchRsp)
	err := c.cc.Invoke(ctx, "/rpcpb.MetaService/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
type MetaServiceServer interface {
	PutCluster(context.Context, *PutClusterReq) (*PutClusterRsp, error)
	RemoveCluster(context.Context, *RemoveClusterReq) (*RemoveClusterRsp, error)
	GetCluster(context.Context, *GetClusterReq) (*GetClusterRsp, error)
	GetClusterList(*GetClusterListReq, MetaService_GetClusterListServer) error
	PutServer(context.Context, *PutServerReq) (*PutServerRsp, error)
	RemoveServer(context.Context, *RemoveServerReq) (*RemoveServerRsp, error)
	GetServer(context.Context, *GetServerReq) (*GetServerRsp, error)
	GetServerList(*GetServerListReq, MetaService_GetServerListServer) error
	PutAPI(context.Context, *PutAPIReq) (*PutAPIRsp, error)
	RemoveAPI(context.Context, *RemoveAPIReq) (*RemoveAPIRsp, error)
	GetAPI(context.Context, *GetAPIReq) (*GetAPIRsp, error)
	GetAPIList(*GetAPIListReq, MetaService_GetAPIListServer) error
	PutRouting(context.Context, *PutRoutingReq) (*PutRoutingRsp, error)
	RemoveRouting(context.Context, *RemoveRoutingReq) (*RemoveRoutingRsp, error)
	GetRouting(context.Context, *GetRoutingReq) (*GetRoutingRsp, error)
	GetRoutingList(*GetRoutingListReq, MetaService_GetRoutingListServer) error
	AddBind(context.Context, *AddBindReq) (*AddBindRsp, error)
	RemoveBind(context.Context, *RemoveBindReq) (*RemoveBindRsp, error)
	RemoveClusterBind(context.Context, *RemoveClusterBindReq) (*RemoveClusterBindRsp, error)
	GetBindServers(context.Context, *GetBindServersReq) (*GetBindServersRsp, error)
	PutPlugin(context.Context, *PutPluginReq) (*PutPluginRsp, error)
	RemovePlugin(context.Context, *RemovePluginReq) (*RemovePluginRsp, error)
	GetPlugin(context.Context, *GetPluginReq) (*GetPluginRsp, error)
	GetPluginList(*GetPluginListReq, MetaService_GetPluginListServer) error
	ApplyPlugins(context.Context, *ApplyPluginsReq) (*ApplyPluginsRsp, error)
	GetAppliedPlugins(context.Context, *GetAppliedPluginsReq) (*GetAppliedPluginsRsp, error)
	Clean(context.Context, *CleanReq) (*CleanRsp, error)
	SetID(context.Context, *SetIDReq) (*SetIDRsp, error)
	Batch(context.Context, *BatchReq) (*BatchRsp, error)
}

func RegisterMetaServiceServer(s *grpc.Server, srv MetaServiceServer) {
	s.RegisterService(&_MetaService_serviceDesc, srv)
}

func _MetaService_PutCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/PutCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutCluster(ctx, req.(*PutClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveCluster(ctx, req.(*RemoveClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetCluster(ctx, req.(*GetClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetClusterList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetClusterListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaServiceServer).GetClusterList(m, &metaServiceGetClusterListServer{stream})
}

type MetaService_GetClusterListServer interface {
	Send(*metapb.Cluster) error
	grpc.ServerStream
}

type metaServiceGetClusterListServer struct {
	grpc.ServerStream
}

func (x *metaServiceGetClusterListServer) Send(m *metapb.Cluster) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaService_PutServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/PutServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutServer(ctx, req.(*PutServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveServer(ctx, req.(*RemoveServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetServer(ctx, req.(*GetServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetServerList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServerListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaServiceServer).GetServerList(m, &metaServiceGetServerListServer{stream})
}

type MetaService_GetServerListServer interface {
	Send(*metapb.Server) error
	grpc.ServerStream
}

type metaServiceGetServerListServer struct {
	grpc.ServerStream
}

func (x *metaServiceGetServerListServer) Send(m *metapb.Server) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaService_PutAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/PutAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutAPI(ctx, req.(*PutAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveAPI(ctx, req.(*RemoveAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetAPI(ctx, req.(*GetAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetAPIList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAPIListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaServiceServer).GetAPIList(m, &metaServiceGetAPIListServer{stream})
}

type MetaService_GetAPIListServer interface {
	Send(*metapb.API) error
	grpc.ServerStream
}

type metaServiceGetAPIListServer struct {
	grpc.ServerStream
}

func (x *metaServiceGetAPIListServer) Send(m *metapb.API) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaService_PutRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRoutingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/PutRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutRouting(ctx, req.(*PutRoutingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoutingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveRouting(ctx, req.(*RemoveRoutingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetRouting(ctx, req.(*GetRoutingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetRoutingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRoutingListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaServiceServer).GetRoutingList(m, &metaServiceGetRoutingListServer{stream})
}

type MetaService_GetRoutingListServer interface {
	Send(*metapb.Routing) error
	grpc.ServerStream
}

type metaServiceGetRoutingListServer struct {
	grpc.ServerStream
}

func (x *metaServiceGetRoutingListServer) Send(m *metapb.Routing) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaService_AddBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).AddBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/AddBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).AddBind(ctx, req.(*AddBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveBind(ctx, req.(*RemoveBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemoveClusterBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClusterBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemoveClusterBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemoveClusterBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemoveClusterBind(ctx, req.(*RemoveClusterBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetBindServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindServersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetBindServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetBindServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetBindServers(ctx, req.(*GetBindServersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_PutPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/PutPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutPlugin(ctx, req.(*PutPluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_RemovePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).RemovePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/RemovePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).RemovePlugin(ctx, req.(*RemovePluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetPlugin(ctx, req.(*GetPluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetPluginList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPluginListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaServiceServer).GetPluginList(m, &metaServiceGetPluginListServer{stream})
}

type MetaService_GetPluginListServer interface {
	Send(*metapb.Plugin) error
	grpc.ServerStream
}

type metaServiceGetPluginListServer struct {
	grpc.ServerStream
}

func (x *metaServiceGetPluginListServer) Send(m *metapb.Plugin) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaService_ApplyPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPluginsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).ApplyPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/ApplyPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).ApplyPlugins(ctx, req.(*ApplyPluginsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetAppliedPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedPluginsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetAppliedPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/GetAppliedPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetAppliedPlugins(ctx, req.(*GetAppliedPluginsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).Clean(ctx, req.(*CleanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_SetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).SetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/SetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).SetID(ctx, req.(*SetIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.MetaService/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).Batch(ctx, req.(*BatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutCluster",
			Handler:    _MetaService_PutCluster_Handler,
		},
		{
			MethodName: "RemoveCluster",
			Handler:    _MetaService_RemoveCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _MetaService_GetCluster_Handler,
		},
		{
			MethodName: "PutServer",
			Handler:    _MetaService_PutServer_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _MetaService_RemoveServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _MetaService_GetServer_Handler,
		},
		{
			MethodName: "PutAPI",
			Handler:    _MetaService_PutAPI_Handler,
		},
		{
			MethodName: "RemoveAPI",
			Handler:    _MetaService_RemoveAPI_Handler,
		},
		{
			MethodName: "GetAPI",
			Handler:    _MetaService_GetAPI_Handler,
		},
		{
			MethodName: "PutRouting",
			Handler:    _MetaService_PutRouting_Handler,
		},
		{
			MethodName: "RemoveRouting",
			Handler:    _MetaService_RemoveRouting_Handler,
		},
		{
			MethodName: "GetRouting",
			Handler:    _MetaService_GetRouting_Handler,
		},
		{
			MethodName: "AddBind",
			Handler:    _MetaService_AddBind_Handler,
		},
		{
			MethodName: "RemoveBind",
			Handler:    _MetaService_RemoveBind_Handler,
		},
		{
			MethodName: "RemoveClusterBind",
			Handler:    _MetaService_RemoveClusterBind_Handler,
		},
		{
			MethodName: "GetBindServers",
			Handler:    _MetaService_GetBindServers_Handler,
		},
		{
			MethodName: "PutPlugin",
			Handler:    _MetaService_PutPlugin_Handler,
		},
		{
			MethodName: "RemovePlugin",
			Handler:    _MetaService_RemovePlugin_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _MetaService_GetPlugin_Handler,
		},
		{
			MethodName: "ApplyPlugins",
			Handler:    _MetaService_ApplyPlugins_Handler,
		},
		{
			MethodName: "GetAppliedPlugins",
			Handler:    _MetaService_GetAppliedPlugins_Handler,
		},
		{
			MethodName: "Clean",
			Handler:    _MetaService_Clean_Handler,
		},
		{
			MethodName: "SetID",
			Handler:    _MetaService_SetID_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _MetaService_Batch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClusterList",
			Handler:       _MetaService_GetClusterList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetServerList",
			Handler:       _MetaService_GetServerList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAPIList",
			Handler:       _MetaService_GetAPIList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRoutingList",
			Handler:       _MetaService_GetRoutingList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPluginList",
			Handler:       _MetaService_GetPluginList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb.proto",
}

func (m *RpcHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(len(m.Uuid)))
	i += copy(dAtA[i:], m.Uuid)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutClusterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutClusterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n1, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster.Size()))
	n2, err := m.Cluster.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutClusterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutClusterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n3, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveClusterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveClusterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n4, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveClusterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveClusterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n5, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n6, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n7, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Cluster != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster.Size()))
		n8, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n9, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutServerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n10, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Server.Size()))
	n11, err := m.Server.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutServerRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutServerRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n12, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveServerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n13, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveServerRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveServerRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n14, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n15, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServerRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n16, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.Server != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Server.Size()))
		n17, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServerListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n18, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutAPIReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n19, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.API.Size()))
	n20, err := m.API.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutAPIRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutAPIRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n21, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAPIReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n22, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveAPIRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAPIRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n23, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n24, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAPIRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n25, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if m.API != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.API.Size()))
		n26, err := m.API.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAPIListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n27, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutRoutingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRoutingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n28, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Routing.Size()))
	n29, err := m.Routing.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutRoutingRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRoutingRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n30, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveRoutingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRoutingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n31, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveRoutingRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRoutingRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n32, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoutingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoutingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n33, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoutingRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoutingRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n34, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	if m.Routing != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Routing.Size()))
		n35, err := m.Routing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoutingListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoutingListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n36, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n37, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Server))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBindRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n38, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n39, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Server))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBindRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n40, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveClusterBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveClusterBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n41, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveClusterBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveClusterBindRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n42, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBindServersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindServersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n43, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Cluster))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBindServersRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindServersRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n44, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	if len(m.Servers) > 0 {
		for _, num := range m.Servers {
			dAtA[i] = 0x10
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutPluginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutPluginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n45, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Plugin.Size()))
	n46, err := m.Plugin.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutPluginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutPluginRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n47, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemovePluginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePluginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n48, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemovePluginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePluginRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n49, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPluginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPluginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n50, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPluginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPluginRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n51, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	if m.Plugin != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Plugin.Size()))
		n52, err := m.Plugin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPluginListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPluginListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n53, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyPluginsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyPluginsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n54, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n54
	if m.Applied != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Applied.Size()))
		n55, err := m.Applied.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyPluginsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyPluginsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n56, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n56
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppliedPluginsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedPluginsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n57, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n57
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppliedPluginsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedPluginsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n58, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n58
	if m.Applied != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.Applied.Size()))
		n59, err := m.Applied.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CleanReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CleanReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n60, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n60
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CleanRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CleanRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n61, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n61
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n62, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n62
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n63, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n63
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n64, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n64
	if len(m.PutClusters) > 0 {
		for _, msg := range m.PutClusters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveClusters) > 0 {
		for _, msg := range m.RemoveClusters {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutServers) > 0 {
		for _, msg := range m.PutServers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveServers) > 0 {
		for _, msg := range m.RemoveServers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutAPIs) > 0 {
		for _, msg := range m.PutAPIs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveAPIs) > 0 {
		for _, msg := range m.RemoveAPIs {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutRoutings) > 0 {
		for _, msg := range m.PutRoutings {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveRoutings) > 0 {
		for _, msg := range m.RemoveRoutings {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AddBinds) > 0 {
		for _, msg := range m.AddBinds {
			dAtA[i] = 0x52
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveBinds) > 0 {
		for _, msg := range m.RemoveBinds {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutPlugins) > 0 {
		for _, msg := range m.PutPlugins {
			dAtA[i] = 0x62
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemovePlugins) > 0 {
		for _, msg := range m.RemovePlugins {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ApplyPlugins != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.ApplyPlugins.Size()))
		n65, err := m.ApplyPlugins.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcpb(dAtA, i, uint64(m.Header.Size()))
	n66, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n66
	if len(m.PutClusters) > 0 {
		for _, msg := range m.PutClusters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveClusters) > 0 {
		for _, msg := range m.RemoveClusters {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutServers) > 0 {
		for _, msg := range m.PutServers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveServers) > 0 {
		for _, msg := range m.RemoveServers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutAPIs) > 0 {
		for _, msg := range m.PutAPIs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveAPIs) > 0 {
		for _, msg := range m.RemoveAPIs {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutRoutings) > 0 {
		for _, msg := range m.PutRoutings {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveRoutings) > 0 {
		for _, msg := range m.RemoveRoutings {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AddBinds) > 0 {
		for _, msg := range m.AddBinds {
			dAtA[i] = 0x52
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveBinds) > 0 {
		for _, msg := range m.RemoveBinds {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PutPlugins) > 0 {
		for _, msg := range m.PutPlugins {
			dAtA[i] = 0x62
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemovePlugins) > 0 {
		for _, msg := range m.RemovePlugins {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintRpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ApplyPlugins != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRpcpb(dAtA, i, uint64(m.ApplyPlugins.Size()))
		n67, err := m.ApplyPlugins.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutClusterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	l = m.Cluster.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutClusterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveClusterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveClusterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutServerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	l = m.Server.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutServerRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveServerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveServerRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServerRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServerListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	l = m.API.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutAPIRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveAPIRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAPIRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.API != nil {
		l = m.API.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAPIListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutRoutingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	l = m.Routing.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutRoutingRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRoutingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRoutingRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoutingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoutingRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Routing != nil {
		l = m.Routing.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoutingListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.Cluster))
	n += 1 + sovRpcpb(uint64(m.Server))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.Cluster))
	n += 1 + sovRpcpb(uint64(m.Server))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveClusterBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.Cluster))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveClusterBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindServersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.Cluster))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindServersRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			n += 1 + sovRpcpb(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutPluginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	l = m.Plugin.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutPluginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePluginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePluginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPluginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPluginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Plugin != nil {
		l = m.Plugin.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPluginListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyPluginsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Applied != nil {
		l = m.Applied.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyPluginsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppliedPluginsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppliedPluginsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.Applied != nil {
		l = m.Applied.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CleanReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CleanRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	n += 1 + sovRpcpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if len(m.PutClusters) > 0 {
		for _, e := range m.PutClusters {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveClusters) > 0 {
		for _, e := range m.RemoveClusters {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutServers) > 0 {
		for _, e := range m.PutServers {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveServers) > 0 {
		for _, e := range m.RemoveServers {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutAPIs) > 0 {
		for _, e := range m.PutAPIs {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveAPIs) > 0 {
		for _, e := range m.RemoveAPIs {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutRoutings) > 0 {
		for _, e := range m.PutRoutings {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveRoutings) > 0 {
		for _, e := range m.RemoveRoutings {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.AddBinds) > 0 {
		for _, e := range m.AddBinds {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveBinds) > 0 {
		for _, e := range m.RemoveBinds {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutPlugins) > 0 {
		for _, e := range m.PutPlugins {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemovePlugins) > 0 {
		for _, e := range m.RemovePlugins {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if m.ApplyPlugins != nil {
		l = m.ApplyPlugins.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRpcpb(uint64(l))
	if len(m.PutClusters) > 0 {
		for _, e := range m.PutClusters {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveClusters) > 0 {
		for _, e := range m.RemoveClusters {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutServers) > 0 {
		for _, e := range m.PutServers {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveServers) > 0 {
		for _, e := range m.RemoveServers {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutAPIs) > 0 {
		for _, e := range m.PutAPIs {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveAPIs) > 0 {
		for _, e := range m.RemoveAPIs {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutRoutings) > 0 {
		for _, e := range m.PutRoutings {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveRoutings) > 0 {
		for _, e := range m.RemoveRoutings {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.AddBinds) > 0 {
		for _, e := range m.AddBinds {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemoveBinds) > 0 {
		for _, e := range m.RemoveBinds {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.PutPlugins) > 0 {
		for _, e := range m.PutPlugins {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if len(m.RemovePlugins) > 0 {
		for _, e := range m.RemovePlugins {
			l = e.Size()
			n += 1 + l + sovRpcpb(uint64(l))
		}
	}
	if m.ApplyPlugins != nil {
		l = m.ApplyPlugins.Size()
		n += 1 + l + sovRpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpcpb(x uint64) (n int) {
	return sovRpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutClusterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutClusterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutClusterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutClusterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutClusterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutClusterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveClusterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveClusterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveClusterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveClusterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveClusterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveClusterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &metapb.Cluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutServerRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutServerRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutServerRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveServerRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveServerRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveServerRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &metapb.Server{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field API", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.API.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutAPIRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutAPIRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutAPIRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAPIRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAPIRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAPIRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field API", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.API == nil {
				m.API = &metapb.API{}
			}
			if err := m.API.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRoutingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRoutingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRoutingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Routing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRoutingRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRoutingRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRoutingRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRoutingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRoutingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRoutingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRoutingRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRoutingRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRoutingRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoutingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoutingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoutingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoutingRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoutingRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoutingRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Routing == nil {
				m.Routing = &metapb.Routing{}
			}
			if err := m.Routing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoutingListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoutingListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoutingListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveClusterBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveClusterBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveClusterBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveClusterBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveClusterBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveClusterBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindServersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindServersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindServersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindServersRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindServersRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindServersRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Servers = append(m.Servers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Servers) == 0 {
					m.Servers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Servers = append(m.Servers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutPluginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutPluginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutPluginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutPluginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutPluginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutPluginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePluginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePluginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePluginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePluginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePluginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePluginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPluginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPluginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPluginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPluginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPluginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPluginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plugin == nil {
				m.Plugin = &metapb.Plugin{}
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPluginListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPluginListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPluginListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyPluginsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyPluginsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyPluginsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applied == nil {
				m.Applied = &metapb.AppliedPlugins{}
			}
			if err := m.Applied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyPluginsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyPluginsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyPluginsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedPluginsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedPluginsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedPluginsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedPluginsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedPluginsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedPluginsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applied == nil {
				m.Applied = &metapb.AppliedPlugins{}
			}
			if err := m.Applied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CleanReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CleanReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CleanReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CleanRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CleanRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CleanRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutClusters = append(m.PutClusters, &PutClusterReq{})
			if err := m.PutClusters[len(m.PutClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveClusters = append(m.RemoveClusters, &RemoveClusterReq{})
			if err := m.RemoveClusters[len(m.RemoveClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutServers = append(m.PutServers, &PutServerReq{})
			if err := m.PutServers[len(m.PutServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveServers = append(m.RemoveServers, &RemoveServerReq{})
			if err := m.RemoveServers[len(m.RemoveServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutAPIs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutAPIs = append(m.PutAPIs, &PutAPIReq{})
			if err := m.PutAPIs[len(m.PutAPIs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAPIs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveAPIs = append(m.RemoveAPIs, &RemoveAPIReq{})
			if err := m.RemoveAPIs[len(m.RemoveAPIs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutRoutings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutRoutings = append(m.PutRoutings, &PutRoutingReq{})
			if err := m.PutRoutings[len(m.PutRoutings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveRoutings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveRoutings = append(m.RemoveRoutings, &RemoveRoutingReq{})
			if err := m.RemoveRoutings[len(m.RemoveRoutings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBinds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddBinds = append(m.AddBinds, &AddBindReq{})
			if err := m.AddBinds[len(m.AddBinds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveBinds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveBinds = append(m.RemoveBinds, &RemoveBindReq{})
			if err := m.RemoveBinds[len(m.RemoveBinds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutPlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutPlugins = append(m.PutPlugins, &PutPluginReq{})
			if err := m.PutPlugins[len(m.PutPlugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovePlugins = append(m.RemovePlugins, &RemovePluginReq{})
			if err := m.RemovePlugins[len(m.RemovePlugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyPlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyPlugins == nil {
				m.ApplyPlugins = &ApplyPluginsReq{}
			}
			if err := m.ApplyPlugins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutClusters = append(m.PutClusters, &PutClusterRsp{})
			if err := m.PutClusters[len(m.PutClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveClusters = append(m.RemoveClusters, &RemoveClusterRsp{})
			if err := m.RemoveClusters[len(m.RemoveClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutServers = append(m.PutServers, &PutServerRsp{})
			if err := m.PutServers[len(m.PutServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveServers = append(m.RemoveServers, &RemoveServerRsp{})
			if err := m.RemoveServers[len(m.RemoveServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutAPIs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutAPIs = append(m.PutAPIs, &PutAPIRsp{})
			if err := m.PutAPIs[len(m.PutAPIs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAPIs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveAPIs = append(m.RemoveAPIs, &RemoveAPIRsp{})
			if err := m.RemoveAPIs[len(m.RemoveAPIs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutRoutings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutRoutings = append(m.PutRoutings, &PutRoutingRsp{})
			if err := m.PutRoutings[len(m.PutRoutings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveRoutings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveRoutings = append(m.RemoveRoutings, &RemoveRoutingRsp{})
			if err := m.RemoveRoutings[len(m.RemoveRoutings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBinds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddBinds = append(m.AddBinds, &AddBindRsp{})
			if err := m.AddBinds[len(m.AddBinds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveBinds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveBinds = append(m.RemoveBinds, &RemoveBindRsp{})
			if err := m.RemoveBinds[len(m.RemoveBinds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutPlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PutPlugins = append(m.PutPlugins, &PutPluginRsp{})
			if err := m.PutPlugins[len(m.PutPlugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovePlugins = append(m.RemovePlugins, &RemovePluginRsp{})
			if err := m.RemovePlugins[len(m.RemovePlugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyPlugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyPlugins == nil {
				m.ApplyPlugins = &ApplyPluginsRsp{}
			}
			if err := m.ApplyPlugins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpcpb.proto", fileDescriptor_rpcpb_a460804f5caec904) }

var fileDescriptor_rpcpb_a460804f5caec904 = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xeb, 0x6a, 0x1b, 0xc7,
	0x17, 0xd7, 0xda, 0x8e, 0x65, 0x1f, 0xc9, 0xb7, 0x89, 0xc9, 0x7f, 0x99, 0x7f, 0x51, 0xc2, 0x42,
	0xa1, 0xa4, 0xad, 0x9d, 0x3a, 0xd0, 0x82, 0x31, 0x75, 0x24, 0x07, 0xbb, 0x86, 0x96, 0x8a, 0x0d,
	0x34, 0xe0, 0xd2, 0x82, 0x22, 0x6d, 0x15, 0x81, 0x62, 0x4d, 0x35, 0xab, 0xd0, 0x16, 0xfa, 0x1a,
	0xa5, 0x8f, 0x94, 0x8f, 0x79, 0x81, 0x86, 0xd6, 0x7d, 0x91, 0xb2, 0x73, 0x9f, 0xd5, 0xae, 0x2b,
	0x1d, 0x5b, 0xf4, 0x93, 0xe5, 0xd9, 0x73, 0xf9, 0xcd, 0x9c, 0xfb, 0x81, 0xda, 0x98, 0x75, 0xd9,
	0x8b, 0x3d, 0x36, 0x1e, 0xa5, 0x23, 0x72, 0x47, 0xfc, 0x43, 0xef, 0xbe, 0x4a, 0xd2, 0x0e, 0x7b,
	0xb1, 0x2f, 0xff, 0xc8, 0x6f, 0x74, 0xb7, 0x3f, 0xea, 0x8f, 0xc4, 0xcf, 0xfd, 0xec, 0x97, 0x3c,
	0x8d, 0xde, 0x87, 0xf5, 0x98, 0x75, 0xbf, 0x48, 0x3a, 0xbd, 0x64, 0x4c, 0x42, 0x58, 0x99, 0x4c,
	0x06, 0xbd, 0x30, 0x78, 0x10, 0x7c, 0xb0, 0xde, 0x5a, 0x79, 0xf3, 0xee, 0x7e, 0x25, 0x16, 0x27,
	0x11, 0x83, 0x8d, 0xf6, 0x24, 0x3d, 0x19, 0x4e, 0x78, 0x9a, 0x8c, 0xe3, 0xe4, 0x47, 0xb2, 0x07,
	0xab, 0x2f, 0x05, 0x93, 0x20, 0xae, 0x1d, 0x6c, 0xef, 0x49, 0x1c, 0x46, 0x98, 0x62, 0x57, 0x54,
	0x64, 0x1f, 0xaa, 0x5d, 0xc9, 0x1d, 0x2e, 0x09, 0x86, 0xad, 0x3d, 0x85, 0x4e, 0x09, 0x55, 0xf4,
	0x9a, 0x2a, 0xfa, 0xd6, 0xd3, 0xc8, 0xd9, 0xdc, 0x1a, 0x29, 0x2c, 0x0d, 0x7a, 0x42, 0xd9, 0x4a,
	0x0b, 0xb2, 0x2f, 0x57, 0xef, 0xee, 0x2f, 0x9d, 0x3f, 0x8d, 0x97, 0x06, 0xbd, 0xe8, 0x7b, 0xd8,
	0x8e, 0x93, 0x57, 0xa3, 0xd7, 0xc9, 0x0d, 0x6e, 0x74, 0x9d, 0xfc, 0x56, 0x5e, 0xfe, 0xfc, 0xf8,
	0xb3, 0x07, 0x38, 0x4b, 0xd2, 0x05, 0x01, 0x64, 0x9e, 0x70, 0xc4, 0xeb, 0xce, 0x66, 0xcf, 0xc0,
	0xda, 0xf3, 0x04, 0x76, 0xac, 0xc6, 0x2f, 0x07, 0x3c, 0x45, 0x5c, 0x29, 0x1a, 0x42, 0xbd, 0x3d,
	0x49, 0x9f, 0x25, 0xe3, 0xd7, 0xb8, 0x27, 0xf9, 0x08, 0x56, 0xb9, 0x60, 0x56, 0xa0, 0x37, 0x35,
	0x68, 0x29, 0x52, 0x53, 0x4b, 0x9a, 0xe8, 0xc2, 0xd5, 0x76, 0xcb, 0x1e, 0xf8, 0x1d, 0x6c, 0x49,
	0x0f, 0xc1, 0x5f, 0xe6, 0x3a, 0xf1, 0xcd, 0x9c, 0x78, 0x84, 0xff, 0x5d, 0x40, 0xfd, 0x2c, 0x49,
	0x17, 0x03, 0x6f, 0xe8, 0xca, 0x46, 0xbc, 0xec, 0x2c, 0x76, 0x0c, 0x8c, 0x1d, 0x5b, 0xb0, 0x6d,
	0xb4, 0x61, 0x3d, 0xaf, 0x0f, 0xeb, 0xed, 0x49, 0xda, 0x6c, 0x9f, 0x63, 0x9e, 0xe2, 0x21, 0x2c,
	0x77, 0xd8, 0x40, 0x61, 0xad, 0x69, 0xac, 0xcd, 0xf6, 0x79, 0xab, 0xa6, 0x1e, 0x66, 0x39, 0x93,
	0x9c, 0x11, 0x45, 0xcf, 0x8d, 0xa2, 0x5b, 0xf6, 0xb8, 0x0b, 0xa8, 0x4b, 0x97, 0x40, 0x5e, 0xe2,
	0x3a, 0xd9, 0x9f, 0xbb, 0xb2, 0x11, 0xbe, 0xf6, 0x1c, 0xd6, 0xcf, 0x92, 0x74, 0x01, 0xc0, 0xfa,
	0x46, 0x30, 0xe2, 0x35, 0xaf, 0x37, 0x5b, 0xe0, 0x99, 0xed, 0x58, 0x24, 0xd4, 0x66, 0xfb, 0x1c,
	0xeb, 0x60, 0xb2, 0xc2, 0xc6, 0xa3, 0x49, 0x3a, 0xb8, 0xec, 0x23, 0x2b, 0xec, 0x58, 0x72, 0xe7,
	0x33, 0xb2, 0x12, 0xaa, 0x2b, 0xac, 0xa2, 0x52, 0x15, 0x56, 0x6b, 0x5c, 0x54, 0x85, 0xbd, 0xc1,
	0x8d, 0x66, 0xaa, 0xb0, 0x78, 0xfc, 0xaa, 0xc2, 0x2e, 0x08, 0x20, 0xf3, 0x84, 0xe3, 0x2a, 0xec,
	0x0c, 0xf6, 0x0c, 0xac, 0x3d, 0x65, 0x85, 0x55, 0x1f, 0xb1, 0x6e, 0xf8, 0x0b, 0x40, 0xb3, 0xd7,
	0x6b, 0x0d, 0x2e, 0x7b, 0x98, 0x07, 0x69, 0xf8, 0x5d, 0xc1, 0x4a, 0xae, 0xa9, 0x23, 0xef, 0x99,
	0xbc, 0xbd, 0xec, 0x7c, 0xd6, 0x79, 0xfa, 0xc8, 0xea, 0x46, 0x58, 0xf3, 0x57, 0xd8, 0x90, 0x1e,
	0xf1, 0xdf, 0x80, 0x3f, 0xf6, 0xd4, 0x23, 0xf0, 0xff, 0x00, 0xbb, 0x5e, 0xcf, 0xb8, 0xa0, 0x6b,
	0x44, 0xa7, 0x45, 0x7a, 0x10, 0x78, 0xbb, 0xc2, 0xdd, 0x32, 0x6e, 0x59, 0x59, 0xf9, 0x22, 0xc0,
	0x4e, 0x2b, 0x41, 0x44, 0x52, 0x03, 0xaa, 0xd2, 0x48, 0x3c, 0x5c, 0x7a, 0xb0, 0xac, 0x94, 0x04,
	0xb1, 0x3e, 0x54, 0x5d, 0x65, 0x7b, 0x38, 0xe9, 0x0f, 0x2e, 0x91, 0x5d, 0x25, 0x13, 0xcc, 0xf9,
	0x6e, 0x44, 0x8a, 0xd4, 0xd4, 0x92, 0x46, 0x75, 0x95, 0x4a, 0xdb, 0xa2, 0xba, 0x4a, 0xfc, 0x65,
	0x66, 0xea, 0x2a, 0xd1, 0xe8, 0x55, 0x57, 0xb9, 0x18, 0x78, 0x43, 0x57, 0x36, 0xae, 0xab, 0xfc,
	0x57, 0x3b, 0x06, 0xc6, 0x8e, 0xb2, 0xab, 0x94, 0x9f, 0xb0, 0xd9, 0x96, 0xc3, 0x56, 0x93, 0xb1,
	0xe1, 0xcf, 0x52, 0x0a, 0x2a, 0x82, 0x1e, 0x41, 0xb5, 0xc3, 0xd8, 0x70, 0x90, 0xf4, 0x14, 0xea,
	0x7b, 0xa6, 0x51, 0x91, 0xc7, 0x5a, 0xb6, 0x26, 0xcb, 0xac, 0xe8, 0x29, 0x45, 0x58, 0xf1, 0x14,
	0x76, 0xb3, 0x6e, 0xc7, 0x57, 0x80, 0xb8, 0xff, 0x4f, 0x45, 0x72, 0x10, 0x96, 0x9b, 0xff, 0x11,
	0x0e, 0x61, 0xed, 0x64, 0x98, 0x74, 0x30, 0x3e, 0x68, 0x79, 0x11, 0x2f, 0xf7, 0x0d, 0xac, 0x3d,
	0x4b, 0xd2, 0xf3, 0xa7, 0xb7, 0xed, 0xfb, 0x87, 0x5a, 0x2e, 0x02, 0xd3, 0x6f, 0xab, 0xb0, 0xd6,
	0xea, 0xa4, 0xdd, 0x97, 0x18, 0x50, 0x9f, 0x42, 0x8d, 0x99, 0x3d, 0x8d, 0x4c, 0xb0, 0xb5, 0x83,
	0x5d, 0xc5, 0xe4, 0xed, 0x8c, 0x62, 0x97, 0x90, 0x1c, 0xc3, 0xe6, 0xd8, 0x2d, 0x43, 0x3c, 0x5c,
	0x16, 0xac, 0xff, 0xd3, 0xfa, 0x72, 0xfb, 0x99, 0x38, 0x47, 0x4e, 0x1e, 0x03, 0x30, 0x3d, 0x9d,
	0xf3, 0x70, 0x45, 0x30, 0xdf, 0xb5, 0x7a, 0xcd, 0xe0, 0x1a, 0x3b, 0x64, 0xe4, 0x08, 0x36, 0xc6,
	0xce, 0x5c, 0xcc, 0xc3, 0x3b, 0x82, 0xef, 0x9e, 0xa7, 0xd4, 0xb2, 0xfa, 0xc4, 0xe4, 0x21, 0x54,
	0x99, 0x98, 0xcd, 0x78, 0xb8, 0x2a, 0xf8, 0xb6, 0xad, 0x3e, 0x39, 0xbc, 0xc4, 0x9a, 0x20, 0x83,
	0x37, 0xd6, 0x23, 0x11, 0x0f, 0xab, 0x1e, 0x3c, 0x77, 0x0e, 0x8b, 0x1d, 0x32, 0xf5, 0x98, 0xaa,
	0x85, 0xe3, 0xe1, 0x5a, 0xfe, 0x31, 0x6d, 0xaf, 0x1a, 0xbb, 0x84, 0xf6, 0x31, 0x0d, 0xeb, 0x7a,
	0xc1, 0x63, 0x3a, 0xdc, 0x39, 0x72, 0xf2, 0x31, 0xac, 0x75, 0x64, 0xeb, 0xc5, 0x43, 0x10, 0xac,
	0x3b, 0x8a, 0xd5, 0x76, 0x83, 0xb1, 0x21, 0xc9, 0x70, 0x8e, 0x4d, 0xb3, 0xc3, 0xc3, 0x9a, 0x87,
	0xd3, 0xeb, 0xc2, 0x62, 0x97, 0x50, 0xd9, 0x4c, 0x05, 0x63, 0x58, 0xcf, 0xdb, 0xcc, 0x94, 0x85,
	0xd8, 0x21, 0xb3, 0x36, 0xd3, 0x7c, 0x1b, 0x05, 0x36, 0xb3, 0xac, 0x3e, 0x31, 0x39, 0x84, 0x7a,
	0xc7, 0xc9, 0x76, 0xe1, 0xa6, 0xca, 0x0f, 0xea, 0x76, 0x7e, 0xf6, 0x8d, 0x3d, 0x5a, 0x27, 0x30,
	0x10, 0x39, 0x69, 0xd6, 0xc0, 0xe0, 0xec, 0x26, 0x81, 0xc1, 0x19, 0x32, 0x30, 0x38, 0x43, 0x07,
	0x06, 0x67, 0xf3, 0x06, 0x06, 0x67, 0xf3, 0x06, 0x46, 0x06, 0x0f, 0x11, 0x18, 0xea, 0x31, 0x91,
	0x81, 0x61, 0x1f, 0x73, 0x8e, 0xc0, 0xe0, 0x0c, 0x11, 0x18, 0x19, 0xce, 0xf9, 0x03, 0x43, 0xd9,
	0x0c, 0x13, 0x18, 0xd6, 0x66, 0x88, 0xc0, 0xe0, 0xcc, 0x0f, 0x8c, 0x83, 0x3f, 0x36, 0xa0, 0xf6,
	0x55, 0x92, 0x76, 0x32, 0xfb, 0x0f, 0xba, 0x09, 0x39, 0x04, 0xb0, 0x1e, 0x4d, 0x0a, 0xb3, 0x3f,
	0x2d, 0x74, 0xfd, 0xa8, 0x42, 0x4e, 0xf4, 0xe0, 0xa4, 0xd9, 0xcb, 0x2a, 0x00, 0x2d, 0x8b, 0x80,
	0xa8, 0x92, 0x01, 0xb0, 0xdb, 0x65, 0x03, 0xc0, 0xdb, 0x9f, 0xd3, 0x82, 0x53, 0xc1, 0x7b, 0x0c,
	0x9b, 0xfe, 0x66, 0x9a, 0x84, 0x53, 0x94, 0xaa, 0xc1, 0xa3, 0xf9, 0x2d, 0x77, 0x54, 0x79, 0x14,
	0x90, 0xcf, 0xc4, 0xca, 0x4e, 0xc6, 0x02, 0x29, 0x2a, 0x41, 0xb4, 0x28, 0xfc, 0xa2, 0x0a, 0x79,
	0xa2, 0xd7, 0x66, 0x8a, 0xb7, 0xa4, 0x0c, 0xd1, 0x92, 0x28, 0x8c, 0x2a, 0x99, 0x6a, 0xb3, 0xda,
	0x34, 0xaa, 0xdd, 0xb5, 0x2d, 0x9d, 0x3e, 0x14, 0x8c, 0x47, 0x62, 0x3d, 0x61, 0x77, 0xa2, 0xe6,
	0xd5, 0xf3, 0x9b, 0x52, 0x9a, 0xdb, 0xad, 0x8a, 0x1b, 0xef, 0xc1, 0xaa, 0x8c, 0x6c, 0x32, 0x55,
	0x01, 0xe9, 0x54, 0xe8, 0x4b, 0x98, 0x26, 0xb4, 0x49, 0x51, 0x15, 0xa4, 0x45, 0x19, 0x20, 0xaa,
	0x64, 0x8a, 0xe4, 0x5a, 0xcd, 0x28, 0x32, 0x7b, 0x42, 0x9a, 0x3b, 0x11, 0xf4, 0x8f, 0x85, 0x1f,
	0xa8, 0x35, 0x9c, 0xeb, 0x07, 0x76, 0x33, 0x47, 0xdd, 0x4d, 0x9e, 0xb8, 0x8d, 0xf4, 0x5e, 0x15,
	0xf2, 0xa4, 0xb0, 0xdc, 0xd2, 0xc2, 0x5c, 0xe3, 0x7a, 0xaf, 0x66, 0x2f, 0x2b, 0xb9, 0xb4, 0x2c,
	0xe5, 0x18, 0xef, 0xcd, 0x03, 0xf0, 0x76, 0x53, 0xb4, 0xe0, 0xd4, 0xf1, 0x5e, 0x67, 0xeb, 0xe3,
	0x7a, 0xaf, 0xbf, 0x0c, 0xa2, 0xf9, 0x0d, 0x92, 0xb8, 0xfd, 0x27, 0x50, 0x55, 0xa9, 0x8c, 0x4c,
	0xd7, 0x7c, 0x3a, 0x9d, 0xed, 0x24, 0x5e, 0x9b, 0xcb, 0x48, 0x61, 0xdd, 0xa7, 0x85, 0x49, 0x2f,
	0xaa, 0x90, 0xaf, 0x61, 0x67, 0x6a, 0xfd, 0x40, 0xfe, 0x5f, 0x14, 0xd9, 0x5a, 0x52, 0xf9, 0x47,
	0x21, 0xf0, 0x54, 0x3c, 0x80, 0xb3, 0x22, 0x70, 0x1f, 0xc0, 0x5f, 0x4f, 0xd0, 0x92, 0x2f, 0xda,
	0x47, 0x4d, 0xa6, 0x25, 0x45, 0x4d, 0x09, 0x2d, 0x4a, 0xc8, 0x6e, 0x14, 0x2b, 0xde, 0x92, 0xc6,
	0x84, 0x96, 0xe4, 0x65, 0x13, 0xc5, 0x39, 0xd5, 0xee, 0x98, 0x4c, 0xa7, 0x0f, 0x9d, 0x28, 0xb6,
	0x33, 0xa8, 0x1b, 0xc5, 0xde, 0x64, 0x4a, 0x73, 0xb3, 0xac, 0xb0, 0xfc, 0x13, 0xa8, 0xbb, 0x69,
	0x9e, 0x94, 0x34, 0x45, 0xb4, 0xa4, 0x26, 0x48, 0x63, 0x4e, 0xcd, 0x6f, 0xc6, 0x98, 0x45, 0x13,
	0x22, 0x2d, 0xff, 0x28, 0x04, 0x7e, 0x08, 0x77, 0xc4, 0x68, 0x45, 0xb6, 0x14, 0x9d, 0x1e, 0xd2,
	0xa8, 0x7f, 0xa0, 0x89, 0xc5, 0xcc, 0x63, 0x88, 0xf5, 0x64, 0x45, 0xfd, 0x03, 0x4d, 0x2c, 0x5a,
	0x39, 0x43, 0xac, 0x27, 0x1e, 0xea, 0x1f, 0x64, 0xc4, 0xad, 0xdd, 0xb7, 0x7f, 0x35, 0x2a, 0x6f,
	0xae, 0x1a, 0xc1, 0xdb, 0xab, 0x46, 0xf0, 0xe7, 0x55, 0x23, 0xf8, 0xfd, 0xef, 0x46, 0xe5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x91, 0x63, 0x32, 0x6b, 0x1f, 0x00, 0x00,
}
